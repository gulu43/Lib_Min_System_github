
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author gulam
 */
public class Return_Book_Admin extends javax.swing.JFrame {

    /**
     * Creates new form Return_Book_Admin
     */
    public Return_Book_Admin() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        tf_user_name = new javax.swing.JTextField();
        tf_book_name = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        L1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Return Book");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("User name");

        jButton2.setText("cancle");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tf_user_name.setText("User_name");
        tf_user_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_user_nameActionPerformed(evt);
            }
        });

        tf_book_name.setText("Book_name");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Book name");

        jButton3.setText("Return");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        L1.setText("No of days and due fess will shown here");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 30, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(33, 33, 33)
                                            .addComponent(tf_user_name, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(tf_book_name, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(L1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_user_name, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_book_name, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(L1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tf_user_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_user_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_user_nameActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        String userNameInput = tf_user_name.getText().trim();
        String bookNameInput = tf_book_name.getText().trim();

        if (userNameInput.isEmpty() || bookNameInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "User name or book name cannot be empty.");
            return;
        }

        String userName = userNameInput.toUpperCase();
        String bookName = bookNameInput.toUpperCase();

        String url = "jdbc:mysql://localhost/library_db";
        String dbUser = "root";
        String dbPwd = "";

        boolean userFound = false;
        boolean bookFound = false;

        // 1. Find user name
        String queryUserName = "SELECT name FROM user WHERE name = ?";
        try (Connection conn = DriverManager.getConnection(url, dbUser, dbPwd);
                PreparedStatement pst = conn.prepareStatement(queryUserName)) {

            pst.setString(1, userName);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                String foundUser = rs.getString("name");
                JOptionPane.showMessageDialog(this, "This user is available: " + foundUser);
                userFound = true;
            }
            if (!userFound) {
                JOptionPane.showMessageDialog(this, "User not found.");
            }
        } catch (Exception e) {
            userFound = false;
            JOptionPane.showMessageDialog(this, "Error searching user: " + e.getMessage());
        }

        // 2. Find book name
        String queryBookName = "SELECT name FROM books WHERE name = ?";
        try (Connection conn = DriverManager.getConnection(url, dbUser, dbPwd);
                PreparedStatement pst = conn.prepareStatement(queryBookName)) {

            pst.setString(1, bookName);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                String foundBook = rs.getString("name");
                JOptionPane.showMessageDialog(this, "This book is available: " + foundBook);
                bookFound = true;
            }
            if (!bookFound) {
                JOptionPane.showMessageDialog(this, "Book not found.");
            }
        } catch (Exception e) {
            bookFound = false;
            JOptionPane.showMessageDialog(this, "Error searching book: " + e.getMessage());
        }

        // Proceed if both user and book are found
        if (userFound && bookFound) {
            // 3. Fetch data for the borrowed book
            String queryGetData = "SELECT * FROM borrow_books_tb WHERE user_name = ? AND book_name = ?";
            try (Connection conn = DriverManager.getConnection(url, dbUser, dbPwd);
                    PreparedStatement pst = conn.prepareStatement(queryGetData)) {

                pst.setString(1, userName);
                pst.setString(2, bookName);
                ResultSet rs = pst.executeQuery();

                if (rs.next()) { // Data found
                    String userNameVar = rs.getString("user_name");
                    String bookNameVar = rs.getString("book_name");
                    int dayLeft = rs.getInt("day_left");
                    int dueAmt = rs.getInt("due_amt");

                    //output showing in ui
                    L1.setText("No of days "+dayLeft+" and Due Fees "+dueAmt+"");
                    
                    // Display borrowed book data
                    System.out.println("user_name -> " + userNameVar
                            + ",\nbook_name -> " + bookNameVar
                            + ",\nday_left -> " + dayLeft
                            + ",\ndue_amt -> " + dueAmt);

                    // 4. Insert data into return_books_tb
                    String queryInsert = "INSERT INTO return_books_tb (user_name, book_name, day_left, duw_amt) VALUES (?, ?, ?, ?)";
                    try (Connection connInsert = DriverManager.getConnection(url, dbUser, dbPwd);
                            PreparedStatement pstInsert = connInsert.prepareStatement(queryInsert)) {

                        pstInsert.setString(1, userNameVar);
                        pstInsert.setString(2, bookNameVar);
                        pstInsert.setInt(3, dayLeft);
                        pstInsert.setDouble(4, dueAmt);

                        int rowsInserted = pstInsert.executeUpdate();
                        if (rowsInserted > 0) {
                            System.out.println("Record inserted successfully into return_books_tb.");
                        } else {
                            System.out.println("Failed to insert record into return_books_tb.");
                        }
                    } catch (Exception e) {
                        System.err.println("Error inserting return record: " + e.getMessage());
                    }

                    // 5. Increase copies count in books table
                    String queryUpdate = "UPDATE books SET copies = copies + 1 WHERE name = ?";
                    try (Connection connUpdate = DriverManager.getConnection(url, dbUser, dbPwd);
                            PreparedStatement pstUpdate = connUpdate.prepareStatement(queryUpdate)) {

                        pstUpdate.setString(1, bookNameVar);
                        int rowsUpdated = pstUpdate.executeUpdate();
                        if (rowsUpdated > 0) {
                            System.out.println("Record updated successfully in books table.");
                        } else {
                            System.out.println("Failed to update record in books table.");
                        }
                    } catch (Exception e) {
                        System.err.println("Error updating book copies: " + e.getMessage());
                    }

                    // 6. Delete record from borrow_books_tb
                    String queryDelete = "DELETE FROM borrow_books_tb WHERE user_name = ? AND book_name = ? AND day_left = ? AND due_amt = ? ORDER BY day_left ASC LIMIT 1";
                    try (Connection connDelete = DriverManager.getConnection(url, dbUser, dbPwd); PreparedStatement pstDelete = connDelete.prepareStatement(queryDelete)) {

                        pstDelete.setString(1, userNameVar);
                        pstDelete.setString(2, bookNameVar);
                        pstDelete.setInt(3, dayLeft);
                        pstDelete.setInt(4, dueAmt);
                        int rowsDeleted = pstDelete.executeUpdate();

                        if (rowsDeleted > 0 && rowsDeleted <= 1) {
                            System.out.println("Record deleted from borrowed books successfully.");
                        } else if (rowsDeleted <= 2) {
                            System.out.println("Manually add record because 2 records were deleted: "
                                    + userNameVar + " " + bookNameVar + " " + dayLeft + " " + dueAmt);
                        } else {
                            System.out.println("Failed to delete record. Manually delete record: "
                                    + userNameVar + " " + bookNameVar + " " + dayLeft + " " + dueAmt);
                        }
                    } catch (Exception e) {
                        System.err.println("Error deleting borrow record: " + e.getMessage());
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "No borrowing data found for this user and book.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error fetching borrowed book data: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "User or book not found, or not available in our records.");
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Return_Book_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Return_Book_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Return_Book_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Return_Book_Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Return_Book_Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField tf_book_name;
    private javax.swing.JTextField tf_user_name;
    // End of variables declaration//GEN-END:variables
}
